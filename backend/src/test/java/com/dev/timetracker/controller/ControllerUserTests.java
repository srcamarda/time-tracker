package com.dev.timetracker.controller;

import com.dev.timetracker.dto.user.DTOCreateUser;
import com.dev.timetracker.dto.user.DTOListUser;
import com.dev.timetracker.dto.user.DTOLoginUser;
import com.dev.timetracker.dto.user.DTOUpdateUser;
import com.dev.timetracker.entity.EntityUser;
import com.dev.timetracker.repository.RepositoryProject;
import com.dev.timetracker.repository.RepositoryTask;
import com.dev.timetracker.repository.RepositoryUser;
import com.dev.timetracker.utility.category.Role;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;

import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.data.domain.*;
import org.springframework.http.MediaType;
import org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors;
import org.springframework.test.web.servlet.MockMvc;

import java.util.List;

import static org.hamcrest.Matchers.containsString;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@SpringBootTest
@AutoConfigureMockMvc
@ExtendWith(MockitoExtension.class)
public class ControllerUserTests {

    @Autowired
    private ObjectMapper objectMapper;

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private RepositoryUser repositoryUser;

    @MockBean
    private RepositoryTask repositoryTask;

    @MockBean
    private RepositoryProject repositoryProject;

    @InjectMocks
    private ControllerUser controllerUser;

    static DTOCreateUser userDTO;
    static DTOCreateUser userDTO2;
    static DTOLoginUser loginDTO;
    static DTOLoginUser loginDTO2;
    static EntityUser user;
    static EntityUser user2;
    static EntityUser userMock;

    @BeforeAll
    public static void initializeTestUser() {

        userDTO = new DTOCreateUser(
                1L,
                "tsilveira",
                "Thiago Silveira",
                "tsilveira@hotmail.com",
                "16213093710",
                Role.JUNIOR,
                "29560000",
                null,
                null,
                null,
                null,
                null,
                null);

        userDTO2 = new DTOCreateUser(
                2L,
                "joao",
                "Joao Batista",
                "jbatista@gamil.com",
                "94309916040",
                Role.PLENO,
                "76825100",
                null,
                null,
                null,
                null,
                null,
                null);

        loginDTO = new DTOLoginUser(
                userDTO.username(),
                userDTO.cpf()
        );

        loginDTO2 = new DTOLoginUser(
                userDTO2.username(),
                userDTO2.cpf()
        );

        user = new EntityUser(userDTO);
        user2 = new EntityUser(userDTO2);

        //Manually set id, as it's normally generated by the database
        user.setId(1L);
        user2.setId(2L);

        userMock = Mockito.mock(EntityUser.class);
        userMock.setId(user.getId());
        userMock.setUsername(user.getUsername());
        userMock.setName(user.getName());
        userMock.setEmail(user.getEmail());
        userMock.setCpf(user.getCpf());
        userMock.setRole(user.getRole());
        userMock.setAddrZip(user.getAddrZip());
    }

    @Test
    public void registerShouldCreateNewUser() throws Exception {

        Mockito.when(repositoryUser.existsByUsername(userDTO.username())).thenReturn(false);
        Mockito.when(repositoryUser.existsByCpf(userDTO.cpf())).thenReturn(false);

        String requestJson = objectMapper.writeValueAsString(userDTO);

        //When register is successful, response should be ok
        mockMvc.perform(post("/users/register")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(requestJson))
                .andExpect(status().isOk());

        Mockito.when(repositoryUser.findByUsernameAndActiveTrue(userDTO.username())).thenReturn(user);

        EntityUser newUser = repositoryUser.findByUsernameAndActiveTrue(userDTO.username());

        Assertions.assertEquals(user, newUser);
    }

    @Test
    public void registerShouldReturnBadRequestWhenUsernameAlreadyExists() throws Exception {

        Mockito.when(repositoryUser.existsByUsername(userDTO.username())).thenReturn(true);

        String requestJson = objectMapper.writeValueAsString(userDTO);

        //When username is already registered, a bad request should be returned
        mockMvc.perform(post("/users/register")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(requestJson))
                .andExpect(status().isBadRequest());
    }

    @Test
    public void registerShouldReturnBadRequestWhenCpfAlreadyExists() throws Exception {

        Mockito.when(repositoryUser.existsByCpf(userDTO.cpf())).thenReturn(true);

        String requestJson = objectMapper.writeValueAsString(userDTO);

        //When cpf is already registered, a bad request should be returned
        mockMvc.perform(post("/users/register")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(requestJson))
                .andExpect(status().isBadRequest());
    }

    @Test
    public void loginShouldReturnOkLoginData() throws Exception {

        Mockito.when(repositoryUser.findByUsernameAndActiveTrue(loginDTO.username())).thenReturn(user);

        String requestJson = objectMapper.writeValueAsString(loginDTO);

        //When login is successful, the username and cpf should be returned
        mockMvc.perform(post("/users/login")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(requestJson))
                .andExpect(status().isOk())
                .andExpect(content().json(objectMapper.writeValueAsString(loginDTO)));
    }

    @Test
    public void loginShouldReturnNotFoundWhenUserNotFound() throws Exception {

        Mockito.when(repositoryUser.findByUsernameAndActiveTrue(loginDTO.username())).thenReturn(null);

        String requestJson = objectMapper.writeValueAsString(loginDTO);

        //When user is not found, a not found should be returned
        mockMvc.perform(post("/users/login")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(requestJson))
                .andExpect(status().isNotFound())
                .andExpect(status().reason(containsString("User not found")));
    }

    @Test
    public void loginShouldReturnBadRequestWhenCpfIncorrect() throws Exception {

        DTOLoginUser loginDTO2 = new DTOLoginUser(
                userDTO.username(),
                "63311986016"
        );

        Mockito.when(repositoryUser.findByUsernameAndActiveTrue(userDTO.username())).thenReturn(user);

        String requestJson = objectMapper.writeValueAsString(loginDTO2);

        //When cpf is incorrect, a bad request should be returned
        mockMvc.perform(post("/users/login")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(requestJson))
                .andExpect(status().isBadRequest())
                .andExpect(status().reason(containsString("Incorrect cpf")));
    }

    @Test
    public void getShouldReturnUser() throws Exception {

        Mockito.when(repositoryUser.findByIdAndActiveTrue(user.getId())).thenReturn(user);

        //When user is found, it should be returned
        mockMvc.perform(get("/users/" + user.getId())
                        .with(SecurityMockMvcRequestPostProcessors.httpBasic("moana", "21055356070")))
                .andExpect(status().isOk())
                .andExpect(content().json(objectMapper.writeValueAsString(new DTOListUser(user))));
    }

    @Test
    public void listAndListAllShouldReturnUsers() throws Exception {

        Page<EntityUser> users = new PageImpl<>(List.of(user, user2));

        Mockito.when(repositoryUser.findAllByActiveTrue(Mockito.any(Pageable.class))).thenReturn(users);

        //When users are found, they should be returned
        mockMvc.perform(get("/users")
                        .with(SecurityMockMvcRequestPostProcessors.httpBasic("moana", "21055356070")))
                .andExpect(status().isOk())
                .andExpect(content().json(objectMapper.writeValueAsString(users.map(DTOListUser::new).getContent())));

        mockMvc.perform(get("/users/all")
                        .with(SecurityMockMvcRequestPostProcessors.httpBasic("moana", "21055356070")))
                .andExpect(status().isOk())
                .andExpect(content().json(objectMapper.writeValueAsString(users.map(DTOListUser::new).getContent())));
    }

    @Test
    public void updateShouldUpdateUser() throws Exception {

        DTOUpdateUser updateDTO = new DTOUpdateUser(
                user.getId(),
                user.getUsername(),
                user.getName(),
                user.getEmail(),
                user.getRole(),
                user.getAddrZip(),
                user.getAddrCountry(),
                user.getAddrState(),
                user.getAddrCity(),
                user.getAddrStreet(),
                user.getAddrDistrict(),
                user.getAddrNumber()
        );

        Mockito.when(repositoryUser.getReferenceById(user.getId())).thenReturn(userMock);

        //When user is updated, it should return ok
        mockMvc.perform(put("/users")
                        .with(SecurityMockMvcRequestPostProcessors.httpBasic("moana", "21055356070"))
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(updateDTO)))
                .andExpect(status().isOk());

        //Update user must be called 1 time
        Mockito.verify(userMock, Mockito.times(1)).update(updateDTO);
    }

    @Test
    public void activateShouldActivateUser() throws Exception {

        Mockito.when(repositoryUser.getReferenceById(userMock.getId())).thenReturn(userMock);

        //When user is activated, it should return ok
        mockMvc.perform(put("/users/activate/" + userMock.getId())
                        .with(SecurityMockMvcRequestPostProcessors.httpBasic("moana", "21055356070")))
                .andExpect(status().isOk());

        //Activate user must be called 1 time
        Mockito.verify(userMock, Mockito.times(1)).activate();
    }

    @Test
    public void inactivateShouldInactivateUser() throws Exception {

        Mockito.when(repositoryUser.getReferenceById(userMock.getId())).thenReturn(userMock);

        //When user is inactivated, it should return ok
        mockMvc.perform(put("/users/inactivate/" + userMock.getId())
                        .with(SecurityMockMvcRequestPostProcessors.httpBasic("moana", "21055356070")))
                .andExpect(status().isOk());

        //Inactivate user must be called 1 time
        Mockito.verify(userMock, Mockito.times(1)).inactivate();
    }

    @Test
    public void deleteShouldDeleteUser() throws Exception {

        Mockito.when(repositoryUser.getReferenceById(userMock.getId())).thenReturn(userMock);
        //Mockito.when(repositoryTask.fin)
        //Mockito.when(repositoryUser.deleteById(userMock.getId())).

        //When user is deleted, it should return ok
        mockMvc.perform(delete("/users/" + userMock.getId())
                        .with(SecurityMockMvcRequestPostProcessors.httpBasic("moana", "21055356070")))
                .andExpect(status().isOk());

        //Delete user must be called 1 time
        Mockito.verify(repositoryUser, Mockito.times(1)).deleteById(userMock.getId());
    }
}